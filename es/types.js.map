{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAGA;GACG;AACH,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA","sourcesContent":["import { ResolveActions, ResolveState, TBaseContext } from './internalTypes'\nimport { Overmind } from './'\n\n/** ===== PUBLIC API\n */\nexport { EventType } from './internalTypes'\n\nexport type Configuration = {\n  onInitialize?: any\n  state?: {}\n  effects?: {}\n  actions?: {}\n}\n\nexport type BaseApp = {\n  state: {}\n  effects: {}\n  actions: {}\n}\n\nexport type TStateObject =\n  | {\n      [key: string]:\n        | TStateObject\n        | string\n        | IDerive<any, any, any>\n        | number\n        | boolean\n        | object\n    }\n  | undefined\n\nexport interface IConfig<ThisConfig extends Configuration> {\n  state: ThisConfig['state'] & {}\n  actions: ThisConfig['actions'] & {}\n  effects: ThisConfig['effects'] & {}\n}\n\n// This is the type of the `app` argument passed in components.\nexport type TApp<ThisConfig extends Configuration> = {\n  // Resolves `Derive` types in state.\n  state: ResolveState<ThisConfig['state']>\n  actions: ResolveActions<ThisConfig['actions']>\n  effects: ThisConfig['effects']\n}\n\n// This is the type of the argument passed in actions.\nexport type TValueContext<\n  ThisConfig extends Configuration,\n  Value\n> = TBaseContext<ThisConfig> & {\n  value: Value\n}\n\nexport interface IAction<ThisConfig extends Configuration, Value> {\n  (context: TValueContext<ThisConfig, Value>): any\n}\n\nexport type IOperator<\n  ThisConfig extends Configuration,\n  Input,\n  Output = Input\n> = (\n  err: Error | null,\n  val: TValueContext<ThisConfig, Input>,\n  next: (err: Error | null, val?: TValueContext<ThisConfig, Output>) => void,\n  final?: (err, Error, val?: TValueContext<ThisConfig, Output>) => void\n) => void\n\nexport type IDerive<\n  ThisConfig extends Configuration,\n  Parent extends TStateObject,\n  Value\n> = (\n  parent: ResolveState<Parent>,\n  state: ResolveState<ThisConfig['state'] & {}>\n) => Value\n\nexport interface IOnInitialize<ThisConfig extends Configuration> {\n  (context: TValueContext<ThisConfig, Overmind<ThisConfig>>): void\n}\n"]}