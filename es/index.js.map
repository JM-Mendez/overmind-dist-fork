{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'betsy'\nimport isPlainObject from 'is-plain-obj'\nimport {\n  IS_PROXY,\n  ProxyStateTree,\n  TTree,\n  IMutation,\n  VALUE,\n  IMutationCallback,\n} from 'proxy-state-tree'\nimport { Derived } from './derived'\nimport { Devtools, Message, safeValue, safeValues } from './Devtools'\nimport {\n  Events,\n  EventType,\n  Options,\n  ResolveActions,\n  ResolveState,\n  Execution,\n  ResolveMockActions,\n  NestedPartial,\n} from './internalTypes'\nimport { proxifyEffects } from './proxyfyEffects'\nimport {\n  Configuration,\n  IAction,\n  IDerive,\n  IOperator,\n  TValueContext,\n  IOnInitialize,\n  TStateObject,\n} from './types'\n\nexport * from './types'\n\n/** This type can be overwriten by app developers if they want to avoid\n * typing and then they can import `Action`,  `Operation` etc. directly from\n * overmind.\n */\nexport interface Config {}\n\nexport interface Action<Value = void> extends IAction<Config, Value> {}\n\nexport interface Derive<Parent extends TStateObject, Value>\n  extends IDerive<Config, Parent, Value> {}\n\nexport interface OnInitialize extends IOnInitialize<Config> {}\n\nconst IS_NODE =\n  typeof module !== 'undefined' && (!this || this.module !== module)\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production'\nconst IS_DEVELOPMENT = process.env.NODE_ENV === 'development'\nconst IS_OPERATOR = Symbol('operator')\n\nexport const makeStringifySafeMutations = (mutations: IMutation[]) => {\n  return mutations.map((mutation) => ({\n    ...mutation,\n    args: safeValues(mutation.args),\n  }))\n}\n\nfunction deepCopy(obj) {\n  if (isPlainObject(obj)) {\n    return Object.keys(obj).reduce((aggr, key) => {\n      aggr[key] = deepCopy(obj[key])\n\n      return aggr\n    }, {})\n  } else if (Array.isArray(obj)) {\n    return obj.map((item) => deepCopy(item))\n  }\n\n  return obj\n}\n\nexport function createOvermindMock<Config extends Configuration>(\n  config: Config,\n  mockedEffects?: NestedPartial<Config['effects']>\n): {\n  actions: ResolveMockActions<Config['actions']>\n  state: ResolveState<Config['state']>\n} {\n  const mock = new Overmind(\n    Object.assign({}, config, {\n      state: deepCopy(config.state),\n    }),\n    {\n      devtools: false,\n      testMode: {\n        effectsCallback: (effect) => {\n          const mockedEffect = (effect.name\n            ? effect.name.split('.')\n            : []\n          ).reduce((aggr, key) => (aggr ? aggr[key] : aggr), mockedEffects)\n\n          if (!mockedEffect || (mockedEffect && !mockedEffect[effect.method])) {\n            throw new Error(\n              `The effect \"${effect.name}\" with metod ${\n                effect.method\n              } has not been mocked`\n            )\n          }\n          return mockedEffect[effect.method]({\n            path: effect.name + '.' + effect.method,\n            args: effect.args,\n          })\n        },\n        actionCallback: (execution) => {\n          return execution.flush().mutations\n        },\n      },\n    }\n  )\n\n  return {\n    actions: mock.actions as any,\n    state: mock.state,\n  }\n}\n\nconst hotReloadingCache = {}\n\n// We do not use TConfig<Config> directly to type the class in order to avoid\n// the 'import(...)' function to be used in exported types.\n\nexport class Overmind<Config extends Configuration> implements Configuration {\n  private proxyStateTree: ProxyStateTree<object>\n  private actionReferences: Function[] = []\n  private nextExecutionId: number = 0\n  private options: Options\n  initialized: Promise<any>\n  eventHub: EventEmitter<Events>\n  devtools: Devtools\n  actions: ResolveActions<Config['actions']>\n  state: ResolveState<Config['state']>\n  effects: Config['effects'] & {}\n  constructor(configuration: Config, options: Options = {}) {\n    const name = options.name || 'MyConfig'\n\n    if (IS_DEVELOPMENT) {\n      if (hotReloadingCache[name]) {\n        return hotReloadingCache[name]\n      } else {\n        hotReloadingCache[name] = this\n      }\n    }\n\n    /*\n      Set up an eventHub to trigger information from derived, computed and reactions\n    */\n    const eventHub = new EventEmitter<Events>()\n\n    /*\n      Create the proxy state tree instance with the state and a wrapper to expose\n      the eventHub\n    */\n    const proxyStateTree = new ProxyStateTree(\n      this.getState(configuration) as any,\n      {\n        devmode: !IS_PRODUCTION,\n        dynamicWrapper: (_, path, func) => func(eventHub, proxyStateTree, path),\n        onGetter: (path, value) =>\n          this.eventHub.emit(EventType.GETTER, {\n            path,\n            value: safeValue(value),\n          }),\n      }\n    )\n\n    this.state = proxyStateTree.state\n    this.effects = configuration.effects || {}\n    this.proxyStateTree = proxyStateTree\n    this.eventHub = eventHub\n    this.options = options\n\n    if (!IS_PRODUCTION && typeof window !== 'undefined') {\n      let warning = 'OVERMIND: You are running in DEVELOPMENT mode.'\n      if (options.logProxies !== true) {\n        const originalConsoleLog = console.log\n\n        console.log = (...args) =>\n          originalConsoleLog.apply(\n            console,\n            args.map((arg) => (arg && arg[IS_PROXY] ? arg[VALUE] : arg))\n          )\n        warning +=\n          '\\n\\n - To improve debugging experience \"console.log\" will NOT log proxies from Overmind, but the actual value. Please see docs to turn off this behaviour'\n      }\n\n      if (\n        options.devtools ||\n        (typeof location !== 'undefined' &&\n          location.hostname === 'localhost' &&\n          options.devtools !== false)\n      ) {\n        const host =\n          options.devtools === true ? 'localhost:3031' : options.devtools\n        const name = options.name\n          ? options.name\n          : typeof document === 'undefined'\n          ? 'NoName'\n          : document.title || 'NoName'\n\n        this.initializeDevtools(host, name, eventHub, proxyStateTree)\n      } else {\n        warning +=\n          '\\n\\n - You are not running on localhost. You will have to manually define the devtools option to connect'\n      }\n\n      if (!IS_NODE) {\n        console.warn(warning)\n      }\n    }\n\n    if (IS_PRODUCTION) {\n      eventHub.on(EventType.OPERATOR_ASYNC, () => {\n        proxyStateTree.getMutationTree().flush()\n      })\n      eventHub.on(EventType.ACTION_END, () => {\n        proxyStateTree.getMutationTree().flush()\n      })\n\n      let nextTick\n      const flushTree = () => {\n        proxyStateTree.getMutationTree().flush(true)\n      }\n\n      this.proxyStateTree.onMutation(() => {\n        nextTick && clearTimeout(nextTick)\n        nextTick = setTimeout(flushTree, 0)\n      })\n    } else if (!options.testMode) {\n      eventHub.on(EventType.OPERATOR_ASYNC, (execution) => {\n        const flushData = execution.flush()\n        if (this.devtools && flushData) {\n          this.devtools.send({\n            type: 'flush',\n            data: {\n              ...execution,\n              ...flushData,\n            },\n          })\n        }\n      })\n      eventHub.on(EventType.ACTION_END, (execution) => {\n        const flushData = execution.flush()\n\n        if (this.devtools && flushData) {\n          this.devtools.send({\n            type: 'flush',\n            data: {\n              ...execution,\n              ...flushData,\n            },\n          })\n        }\n      })\n    }\n\n    /*\n      Expose the created actions\n    */\n    this.actions = this.getActions(configuration)\n\n    if (configuration.onInitialize) {\n      const onInitialize = this.createAction(\n        'onInitialize',\n        configuration.onInitialize,\n        true\n      )\n\n      this.initialized = Promise.resolve(onInitialize(this))\n    } else {\n      this.initialized = Promise.resolve(null)\n    }\n  }\n  private createExecution(name, action) {\n    if (IS_PRODUCTION) {\n      return ({\n        getMutationTree: () => {\n          return this.proxyStateTree.getMutationTree()\n        },\n        emit: this.eventHub.emit.bind(this.eventHub),\n      } as any) as Execution\n    }\n\n    const mutationTrees: any[] = []\n    const execution = {\n      actionId: this.actionReferences.indexOf(action),\n      executionId: this.nextExecutionId++,\n      actionName: name,\n      operatorId: 0,\n      path: [],\n      emit: this.eventHub.emit.bind(this.eventHub),\n      send: this.devtools ? this.devtools.send.bind(this.devtools) : () => {},\n      trackEffects: this.trackEffects.bind(this, this.effects),\n      flush: () => {\n        return this.proxyStateTree.flush(mutationTrees)\n      },\n      getMutationTree: () => {\n        const mutationTree = this.proxyStateTree.getMutationTree()\n\n        mutationTrees.push(mutationTree)\n\n        return mutationTree\n      },\n      scopeValue: (value, tree) => {\n        return this.scopeValue(value, tree)\n      },\n    }\n\n    return execution\n  }\n  private createContext(value, execution, tree) {\n    return {\n      value,\n      state: tree.state,\n      actions: this.actions,\n      execution,\n      proxyStateTree: this.proxyStateTree,\n      effects: this.trackEffects(this.effects, execution),\n    }\n  }\n  private scopeValue(value: any, tree: TTree) {\n    if (!value) {\n      return value\n    }\n    if (value[IS_PROXY]) {\n      return this.proxyStateTree.rescope(value, tree)\n    } else if (isPlainObject(value)) {\n      return Object.assign(\n        {},\n        ...Object.keys(value).map((key) => ({\n          [key]: this.proxyStateTree.rescope(value[key], tree),\n        }))\n      )\n    } else {\n      return value\n    }\n  }\n  private createAction(name, action, isOnInitialize = false) {\n    this.actionReferences.push(action)\n    const actionFunc = async (value?) => {\n      if (IS_PRODUCTION || action[IS_OPERATOR]) {\n        return new Promise((resolve, reject) => {\n          const execution = this.createExecution(name, action)\n          this.eventHub.emit(EventType.ACTION_START, execution)\n\n          action[IS_OPERATOR]\n            ? action(\n                null,\n                {\n                  value,\n                  state: this.proxyStateTree.state,\n                  actions: this.actions,\n                  execution,\n                  effects: this.trackEffects(this.effects, execution),\n                },\n                (err, finalContext) => {\n                  finalContext &&\n                    this.eventHub.emit(EventType.ACTION_END, {\n                      ...finalContext.execution,\n                      operatorId: finalContext.execution.operatorId - 1,\n                    })\n                  if (err) reject(err)\n                  else resolve(this.options.testMode && finalContext.execution)\n                }\n              )\n            : resolve(\n                action(\n                  this.createContext(\n                    value,\n                    execution,\n                    execution.getMutationTree()\n                  )\n                )\n                  ? undefined\n                  : undefined\n              )\n        })\n      } else {\n        const execution = {\n          ...this.createExecution(name, action),\n          operatorId: 0,\n          type: 'action',\n        }\n        this.eventHub.emit(EventType.ACTION_START, execution)\n        this.eventHub.emit(EventType.OPERATOR_START, execution)\n\n        const mutationTree = execution.getMutationTree()\n\n        mutationTree.onMutation((mutation) => {\n          this.eventHub.emit(EventType.MUTATIONS, {\n            ...execution,\n            mutations: makeStringifySafeMutations([mutation]),\n          })\n\n          setTimeout(() => {\n            const flushData = mutationTree.flush(true)\n\n            if (this.devtools && flushData) {\n              this.devtools.send({\n                type: 'flush',\n                data: {\n                  ...execution,\n                  ...flushData,\n                  mutations: makeStringifySafeMutations(flushData.mutations),\n                },\n              })\n            }\n          })\n        })\n\n        const context = this.createContext(\n          this.scopeValue(value, mutationTree),\n          execution,\n          mutationTree\n        )\n        const result = isOnInitialize ? await action(context) : action(context)\n\n        this.eventHub.emit(EventType.OPERATOR_END, {\n          ...execution,\n          isAsync: result instanceof Promise,\n          result: undefined,\n        })\n        this.eventHub.emit(EventType.ACTION_END, execution)\n\n        return Promise.resolve(this.options.testMode && execution)\n      }\n    }\n\n    if (this.options.testMode) {\n      const actionCallback = this.options.testMode.actionCallback\n\n      return (value?) => (actionFunc as any)(value).then(actionCallback)\n    }\n\n    return actionFunc\n  }\n  private trackEffects(effects = {}, execution) {\n    if (IS_PRODUCTION) {\n      return effects\n    }\n\n    return proxifyEffects(this.effects, (effect) => {\n      let result\n      try {\n        result = this.options.testMode\n          ? this.options.testMode.effectsCallback(effect)\n          : effect.func.apply(this, effect.args)\n      } catch (error) {\n        // eslint-disable-next-line standard/no-callback-literal\n        this.eventHub.emit(EventType.EFFECT, {\n          ...execution,\n          ...effect,\n          args: safeValues(effect.args),\n          isPending: false,\n          error: error.message,\n        })\n        throw error\n      }\n\n      if (result instanceof Promise) {\n        // eslint-disable-next-line standard/no-callback-literal\n        this.eventHub.emit(EventType.EFFECT, {\n          ...execution,\n          ...effect,\n          args: safeValues(effect.args),\n          isPending: true,\n          error: false,\n        })\n        result\n          .then((promisedResult) => {\n            // eslint-disable-next-line standard/no-callback-literal\n            this.eventHub.emit(EventType.EFFECT, {\n              ...execution,\n              ...effect,\n              args: safeValues(effect.args),\n              result: safeValue(promisedResult),\n              isPending: false,\n              error: false,\n            })\n          })\n          .catch((error) => {\n            this.eventHub.emit(EventType.EFFECT, {\n              ...execution,\n              ...effect,\n              args: safeValues(effect.args),\n              isPending: false,\n              error: error.message,\n            })\n            throw error\n          })\n      } else {\n        // eslint-disable-next-line standard/no-callback-literal\n        this.eventHub.emit(EventType.EFFECT, {\n          ...execution,\n          ...effect,\n          args: safeValues(effect.args),\n          result: safeValue(result),\n          isPending: false,\n          error: false,\n        })\n      }\n\n      return result\n    })\n  }\n  private initializeDevtools(host, name, eventHub, proxyStateTree) {\n    const devtools = new Devtools(name)\n    devtools.connect(\n      host,\n      (message: Message) => {\n        // To use for communication from devtools app\n      }\n    )\n    for (let type in EventType) {\n      eventHub.on(EventType[type], (data) =>\n        devtools.send({\n          type: EventType[type],\n          data,\n        })\n      )\n    }\n    // This message is always the first as it is passed synchronously, all other\n    // events are emitted async\n    devtools.send({\n      type: 'init',\n      data: {\n        state: proxyStateTree.sourceState,\n      },\n    })\n    this.devtools = devtools\n  }\n  private getState(configuration: Configuration) {\n    let state = {}\n    if (configuration.state) {\n      state = this.processState(configuration.state)\n    }\n\n    return state\n  }\n  private processState(state: {}) {\n    return Object.keys(state).reduce((aggr, key) => {\n      if (key === '__esModule') {\n        return aggr\n      }\n      const originalDescriptor = Object.getOwnPropertyDescriptor(state, key)\n\n      if (originalDescriptor && 'get' in originalDescriptor) {\n        Object.defineProperty(aggr, key, originalDescriptor as any)\n\n        return aggr\n      }\n\n      const value = state[key]\n\n      if (isPlainObject(value)) {\n        aggr[key] = this.processState(value)\n      } else if (typeof value === 'function') {\n        aggr[key] = new Derived(value)\n      } else {\n        Object.defineProperty(aggr, key, originalDescriptor as any)\n      }\n\n      return aggr\n    }, {})\n  }\n  private getActions(configuration: Configuration) {\n    let actions = {}\n    if (configuration.actions) {\n      actions = configuration.actions\n    }\n\n    const evaluatedActions = Object.keys(actions).reduce((aggr, name) => {\n      if (typeof actions[name] === 'function') {\n        return Object.assign(aggr, {\n          [name]: this.createAction(name, actions[name]),\n        })\n      }\n\n      return Object.assign(aggr, {\n        [name]: Object.keys(actions[name] || {}).reduce(\n          (aggr, subName) =>\n            Object.assign(\n              aggr,\n              typeof actions[name][subName] === 'function'\n                ? {\n                    [subName]: this.createAction(\n                      subName,\n                      actions[name][subName]\n                    ),\n                  }\n                : {}\n            ),\n          {}\n        ),\n      })\n    }, {}) as any\n\n    if (this.devtools) {\n      Object.keys(evaluatedActions).forEach((key) => {\n        if (typeof evaluatedActions[key] === 'function') {\n          evaluatedActions[key].displayName = key\n        } else {\n          Object.keys(evaluatedActions[key]).forEach((subKey) => {\n            evaluatedActions[key][subKey].displayName = key + '.' + subKey\n          })\n        }\n      })\n    }\n\n    return evaluatedActions\n  }\n  getTrackStateTree() {\n    return this.proxyStateTree.getTrackStateTree()\n  }\n  getMutationTree() {\n    return this.proxyStateTree.getMutationTree()\n  }\n  addMutationListener = (cb: IMutationCallback) => {\n    return this.proxyStateTree.onMutation(cb)\n  }\n}\n\n/*\n  OPERATORS\n  needs to be in this file for typing override to work\n*/\nexport type Operator<Input = void, Output = Input> = IOperator<\n  Config,\n  Input,\n  Output\n>\n\nexport function pipe<ThisConfig extends Configuration, A, B>(\n  aOperator: IOperator<ThisConfig, A, B>\n): IOperator<ThisConfig, A, B>\n\nexport function pipe<ThisConfig extends Configuration, A, B, C>(\n  aOperator: IOperator<ThisConfig, A, B>,\n  bOperator: IOperator<ThisConfig, B, C>\n): IOperator<ThisConfig, A, C>\n\nexport function pipe<ThisConfig extends Configuration, A, B, C, D>(\n  aOperator: IOperator<ThisConfig, A, B>,\n  bOperator: IOperator<ThisConfig, B, C>,\n  cOperator: IOperator<ThisConfig, C, D>\n): IOperator<ThisConfig, A, D>\n\nexport function pipe<ThisConfig extends Configuration, A, B, C, D, E>(\n  aOperator: IOperator<ThisConfig, A, B>,\n  bOperator: IOperator<ThisConfig, B, C>,\n  cOperator: IOperator<ThisConfig, C, D>,\n  dOperator: IOperator<ThisConfig, D, E>\n): IOperator<ThisConfig, A, E>\n\nexport function pipe<ThisConfig extends Configuration, A, B, C, D, E, F>(\n  aOperator: IOperator<ThisConfig, A, B>,\n  bOperator: IOperator<ThisConfig, B, C>,\n  cOperator: IOperator<ThisConfig, C, D>,\n  dOperator: IOperator<ThisConfig, D, E>,\n  eOperator: IOperator<ThisConfig, E, F>\n): IOperator<ThisConfig, A, F>\n\nexport function pipe<ThisConfig extends Configuration, A, B, C, D, E, F, G>(\n  aOperator: IOperator<ThisConfig, A, B>,\n  bOperator: IOperator<ThisConfig, B, C>,\n  cOperator: IOperator<ThisConfig, C, D>,\n  dOperator: IOperator<ThisConfig, D, E>,\n  eOperator: IOperator<ThisConfig, E, F>,\n  fOperator: IOperator<ThisConfig, F, G>\n): IOperator<ThisConfig, A, G>\n\nexport function pipe(...operators) {\n  const instance = (err, context, next, final = next) => {\n    if (err) next(err)\n    else {\n      let operatorIndex = 0\n      let asyncTimeout\n      const finalClearingAsync = (...args) => {\n        clearTimeout(asyncTimeout)\n        final(...args)\n      }\n      const run = (runErr, runContext) => {\n        asyncTimeout = setTimeout(() => {\n          context.execution.emit(EventType.OPERATOR_ASYNC, {\n            ...runContext.execution,\n            isAsync: true,\n          })\n        })\n        operators[operatorIndex++](\n          runErr,\n          runContext,\n          runNextOperator,\n          finalClearingAsync\n        )\n      }\n\n      const runNextOperator = (operatorError, operatorContext) => {\n        clearTimeout(asyncTimeout)\n        if (operatorError) return next(operatorError)\n        if (operatorIndex >= operators.length)\n          return next(null, operatorContext)\n\n        if (operatorContext.value instanceof Promise) {\n          context.execution.emit(EventType.OPERATOR_ASYNC, {\n            ...operatorContext.execution,\n            isAsync: true,\n          })\n          operatorContext.value\n            .then((promiseValue) =>\n              run(null, { ...operatorContext, value: promiseValue })\n            )\n            .catch((promiseError) => next(promiseError, operatorContext))\n        } else {\n          try {\n            run(null, operatorContext)\n          } catch (operatorError) {\n            next(operatorError, operatorContext)\n          }\n        }\n      }\n\n      runNextOperator(null, context)\n    }\n  }\n  instance[IS_OPERATOR] = true\n  return instance\n}\n\n/*\n  OPERATORS\n*/\n\nfunction startDebugOperator(type, arg, context) {\n  if (IS_PRODUCTION) {\n    return\n  }\n  const name =\n    typeof arg === 'function' ? arg.displayName || arg.name : arg.toString()\n\n  context.execution.emit(EventType.OPERATOR_START, {\n    ...context.execution,\n    name,\n    type,\n  })\n}\n\nfunction stopDebugOperator(context, value) {\n  if (IS_PRODUCTION) {\n    return\n  }\n\n  if (value instanceof Promise) {\n    value.then((promiseValue) => {\n      context.execution.emit(EventType.OPERATOR_END, {\n        ...context.execution,\n        result: safeValue(promiseValue),\n        isAsync: true,\n      })\n    })\n  } else {\n    context.execution.emit(EventType.OPERATOR_END, {\n      ...context.execution,\n      result: safeValue(value),\n      isAsync: false,\n    })\n  }\n}\n\nfunction createContext(context, value, path?) {\n  if (IS_PRODUCTION) {\n    return {\n      ...context,\n      value,\n    }\n  }\n\n  const newExecution = {\n    ...context.execution,\n    operatorId: context.execution.operatorId + 1,\n    path: path || context.execution.path,\n  }\n\n  return {\n    ...context,\n    value,\n    execution: newExecution,\n    effects: context.execution.trackEffects(newExecution),\n  }\n}\n\nfunction createNextPath(next) {\n  if (IS_PRODUCTION) {\n    return next\n  }\n\n  return (err, context) => {\n    const newContext = {\n      ...context,\n      execution: {\n        ...context.execution,\n        path: context.execution.path.slice(\n          0,\n          context.execution.path.length - 1\n        ),\n      },\n    }\n    if (err) next(err, newContext)\n    else next(null, newContext)\n  }\n}\n\nexport function map<Input, Output, ThisConfig extends Configuration = Config>(\n  operation: (input: TValueContext<ThisConfig, Input>) => Output\n): IOperator<ThisConfig, Input, Output extends Promise<infer U> ? U : Output> {\n  const instance = (err, context, next) => {\n    if (err) next(err)\n    else {\n      startDebugOperator('map', operation, context)\n      const value = operation(context)\n      stopDebugOperator(context, value)\n      next(null, createContext(context, value))\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function forEach<\n  Input extends any[],\n  ThisConfig extends Configuration = Config\n>(\n  forEachItemOperator: IOperator<ThisConfig, Input[0], any>\n): IOperator<ThisConfig, Input, Input> {\n  const instance = (err, context, next) => {\n    if (err) next(err)\n    else {\n      let array = context.value\n      let evaluatingCount = array.length\n      let lastContext\n      let hasErrored = false\n      const evaluate = (err) => {\n        if (hasErrored) {\n          return\n        }\n        if (err) {\n          hasErrored = true\n          return next(err)\n        }\n        evaluatingCount--\n\n        if (!evaluatingCount) {\n          stopDebugOperator(lastContext, lastContext.value)\n          next(null, lastContext)\n        }\n      }\n      startDebugOperator('forEach', '', context)\n\n      array.forEach((value, index) => {\n        lastContext = createContext(\n          lastContext || context,\n          value,\n          context.execution.path.concat(String(index))\n        )\n        const nextWithPath = createNextPath(evaluate)\n        forEachItemOperator(null, lastContext, nextWithPath)\n      })\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function parallel<Input, ThisConfig extends Configuration = Config>(\n  ...operators: IOperator<ThisConfig, Input>[]\n): IOperator<ThisConfig, Input, Input> {\n  const instance = (err, context, next) => {\n    if (err) next(err)\n    else {\n      let evaluatingCount = operators.length\n      let lastContext\n      let hasErrored = false\n      const evaluate = (err) => {\n        if (hasErrored) {\n          return\n        }\n        if (err) {\n          hasErrored = true\n          return next(err, lastContext)\n        }\n        evaluatingCount--\n\n        if (!evaluatingCount) {\n          stopDebugOperator(lastContext, lastContext.value)\n          next(null, lastContext)\n        }\n      }\n      startDebugOperator('parallel', '', context)\n\n      operators.forEach((operator, index) => {\n        lastContext = createContext(\n          lastContext || context,\n          context.value,\n          context.execution.path.concat(String(index))\n        )\n        const nextWithPath = createNextPath(evaluate)\n        operator(null, lastContext, nextWithPath)\n      })\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function filter<Input, ThisConfig extends Configuration = Config>(\n  operation: (input: TValueContext<ThisConfig, Input>) => boolean\n): IOperator<ThisConfig, Input, Input> {\n  const instance = (err, context, next, final) => {\n    if (err) next(err)\n    else {\n      startDebugOperator('filter', operation, context)\n      if (operation(context)) {\n        stopDebugOperator(context, context.value)\n        next(null, createContext(context, context.value))\n      } else {\n        stopDebugOperator(context, context.value)\n        final(null, createContext(context, context.value))\n      }\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function action<Input, ThisConfig extends Configuration = Config>(\n  operation: (input: TValueContext<ThisConfig, Input>) => void\n): IOperator<ThisConfig, Input, Input> {\n  const instance = (err, context, next) => {\n    if (err) next(err)\n    else {\n      startDebugOperator('action', operation, context)\n\n      const mutationTree = context.execution.getMutationTree()\n      if (!IS_PRODUCTION) {\n        mutationTree.onMutation((mutation) => {\n          context.execution.emit(EventType.MUTATIONS, {\n            ...context.execution,\n            mutations: makeStringifySafeMutations([mutation]),\n          })\n          setTimeout(() => {\n            const flushData = mutationTree.flush(true)\n            if (flushData) {\n              context.execution.send({\n                type: 'flush',\n                data: {\n                  ...context.execution,\n                  ...flushData,\n                  mutations: makeStringifySafeMutations(flushData.mutations),\n                },\n              })\n            }\n          })\n        })\n      }\n      const maybePromise: any = operation({\n        ...context,\n        value: IS_PRODUCTION\n          ? context.value\n          : context.execution.scopeValue(context.value, mutationTree),\n        state: mutationTree.state,\n      })\n\n      stopDebugOperator(context, maybePromise)\n\n      next(\n        null,\n        createContext(\n          context,\n          maybePromise instanceof Promise\n            ? maybePromise.then(() => context.value)\n            : context.value\n        )\n      )\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function fork<\n  Input,\n  Paths extends { [key: string]: IOperator<ThisConfig, Input, any> },\n  ThisConfig extends Configuration = Config\n>(\n  operation: (input: TValueContext<ThisConfig, Input>) => keyof Paths,\n  paths: Paths\n): IOperator<ThisConfig, Input, Input> {\n  const instance = (err, context, next) => {\n    if (err) next(err)\n    else {\n      startDebugOperator('fork', operation, context)\n      const path = operation(context)\n      const newContext = createContext(\n        context,\n        context.value,\n        context.execution.path.concat(path)\n      )\n      const nextWithPaths = createNextPath((err, returnedContext) => {\n        if (err) next(err)\n        else {\n          stopDebugOperator(context, context.value)\n          next(null, { ...returnedContext, value: newContext.value })\n        }\n      })\n      paths[path](null, newContext, nextWithPaths)\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function when<\n  Input,\n  OutputA,\n  OutputB,\n  ThisConfig extends Configuration = Config\n>(\n  operation: (input: TValueContext<ThisConfig, Input>) => boolean,\n  paths: {\n    true: IOperator<ThisConfig, Input, OutputA>\n    false: IOperator<ThisConfig, Input, OutputB>\n  }\n): IOperator<ThisConfig, Input, OutputA | OutputB> {\n  const instance = (err, context, next) => {\n    if (err) next(err)\n    else {\n      startDebugOperator('when', operation, context)\n      const newContext = createContext(\n        context,\n        context.value,\n        context.execution.path.concat('true')\n      )\n      if (operation(context)) {\n        const nextWithPath = createNextPath(next)\n        stopDebugOperator(context, context.value)\n        paths.true(null, newContext, nextWithPath)\n      } else {\n        const newContext = createContext(\n          context,\n          context.value,\n          context.execution.path.concat('false')\n        )\n        const nextWithPath = createNextPath(next)\n        stopDebugOperator(context, context.value)\n        paths.false(null, newContext, nextWithPath)\n      }\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function wait<Input, ThisConfig extends Configuration = Config>(\n  ms: number\n): IOperator<ThisConfig, Input, Input> {\n  const instance = (err, context, next) => {\n    if (err) next(err)\n    else {\n      startDebugOperator('wait', ms, context)\n      setTimeout(() => {\n        stopDebugOperator(context, context.value)\n        next(null, createContext(context, context.value))\n      }, ms)\n    }\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n\nexport function debounce<Input, ThisConfig extends Configuration = Config>(\n  ms: number\n): IOperator<ThisConfig, Input, Input> {\n  let timeout\n  let previousFinal\n  const instance = (err, context, next, final) => {\n    if (err) {\n      return next(err)\n    }\n    startDebugOperator('debounce', ms, context)\n    if (timeout) {\n      clearTimeout(timeout)\n      previousFinal(null, context)\n    }\n    previousFinal = final\n    timeout = setTimeout(() => {\n      timeout = null\n      stopDebugOperator(context, context.value)\n      next(null, createContext(context, context.value))\n    }, ms)\n  }\n  instance[IS_OPERATOR] = true\n\n  return instance\n}\n"]}