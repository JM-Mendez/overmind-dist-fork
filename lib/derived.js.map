{"version":3,"file":"derived.js","sourceRoot":"","sources":["../src/derived.ts"],"names":[],"mappings":";;AACA,uDAOyB;AAEzB,mDAAmD;AAEnD,MAAa,OAAO;IAOlB,YAAoB,EAA2C;QAA3C,OAAE,GAAF,EAAE,CAAyC;QANvD,YAAO,GAAY,IAAI,CAAA;QAKvB,gBAAW,GAAW,CAAC,CAAA;QAE7B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACjC,CAAC;IACD,QAAQ,CACN,QAA8B,EAC9B,cAAmC,EACnC,IAAI;QAEJ,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,iBAAiB,EAAE,CAAA;YAExD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YACnC,WAAW,CAAC,GAAG,EAAE,CAAA;YACjB,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAC/B,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EACxB,IAAI,CAAC,cAAc,CAAC,KAAK,CAC1B,CAAA;YAED,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAC7D,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;gBAC9C,IAAI,IAAI,CAAC,OAAO,EAAE;oBAChB,OAAM;iBACP;gBAED,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;oBACtB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;wBACxB,QAAQ,CAAC,SAAS,CAAC,yBAAS,CAAC,aAAa,EAAE;4BAC1C,IAAI;4BACJ,OAAO;yBACR,CAAC,CAAA;wBACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;wBACnB,OAAM;qBACP;iBACF;YACH,CAAC,CAAC,CAAA;SACH;QACD,IACE,IAAI,CAAC,OAAO;YACZ,CAAC,IAAI,CAAC,KAAK;gBACT,IAAI,CAAC,KAAK,CAAC,2BAAQ,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,wBAAK,CAAC,CAAE,cAAsB,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,EAClE;YACA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAEvD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAA;YACpB,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAA;YAC1D,QAAQ,CAAC,SAAS,CAAC,yBAAS,CAAC,OAAO,EAAE;gBACpC,IAAI;gBACJ,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;aAClB,CAAC,CAAA;YACF,IAAI,CAAC,WAAW,EAAE,CAAA;SACnB;QAED,0DAA0D;QAC1D,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YAC3B,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAA;YAE9C,IAAI,WAAW,YAAY,iCAAc,EAAE;gBACzC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA;aAClC;SACF;QAED,OAAO,IAAI,CAAC,KAAK,CAAA;IACnB,CAAC;CACF;AAzED,0BAyEC","sourcesContent":["import { EventEmitter } from 'betsy'\nimport {\n  ProxyStateTree,\n  VALUE,\n  IS_PROXY,\n  ITrackCallback,\n  ITrackStateTree,\n  TrackStateTree,\n} from 'proxy-state-tree'\n\nimport { EventType, Events } from './internalTypes'\n\nexport class Derived {\n  private isDirty: boolean = true\n  private trackStateTree: ITrackStateTree<any>\n  private scope: any\n  private value: any\n  private paths: Set<string>\n  private updateCount: number = 0\n  constructor(private cb: (state: object, parent: object) => void) {\n    return this.evaluate.bind(this)\n  }\n  evaluate(\n    eventHub: EventEmitter<Events>,\n    proxyStateTree: ProxyStateTree<any>,\n    path\n  ) {\n    if (!this.trackStateTree) {\n      this.trackStateTree = proxyStateTree.getTrackStateTree()\n\n      const pathAsArray = path.split('.')\n      pathAsArray.pop()\n      const parent = pathAsArray.reduce(\n        (curr, key) => curr[key],\n        this.trackStateTree.state\n      )\n\n      this.scope = () => this.cb(parent, this.trackStateTree.state)\n      proxyStateTree.onMutation((_, paths, flushId) => {\n        if (this.isDirty) {\n          return\n        }\n\n        for (let path of paths) {\n          if (this.paths.has(path)) {\n            eventHub.emitAsync(EventType.DERIVED_DIRTY, {\n              path,\n              flushId,\n            })\n            this.isDirty = true\n            return\n          }\n        }\n      })\n    }\n    if (\n      this.isDirty ||\n      (this.value &&\n        this.value[IS_PROXY] &&\n        this.value[VALUE][(proxyStateTree as any).PROXY] !== this.value)\n    ) {\n      this.value = this.trackStateTree.trackScope(this.scope)\n\n      this.isDirty = false\n      this.paths = new Set(this.trackStateTree.pathDependencies)\n      eventHub.emitAsync(EventType.DERIVED, {\n        path,\n        paths: Array.from(this.paths),\n        updateCount: this.updateCount,\n        value: this.value,\n      })\n      this.updateCount++\n    }\n\n    // Tracks the paths for the consumer of this derived value\n    for (let path of this.paths) {\n      const currentTree = proxyStateTree.currentTree\n\n      if (currentTree instanceof TrackStateTree) {\n        currentTree.addTrackingPath(path)\n      }\n    }\n\n    return this.value\n  }\n}\n"]}